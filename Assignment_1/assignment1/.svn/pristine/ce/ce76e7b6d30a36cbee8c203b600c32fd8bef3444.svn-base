#include <string>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <iostream>
#include <vector>
#include <algorithm> 
#include <numeric>
#include <functional> 
#include <cctype>
#include <locale>
#include <math.h>

using namespace std ;

// store the input text file of attributes
vector<string> attributes_input;
// store the input text file of queries
vector<string> queries_input;
// store the input text file of access frequency
vector<string> access_freq_input;

// data process
vector<string> attributes_list;
vector<vector<string> > trimmed_queries;
vector<vector<string> > queries_word;
vector<string> firstTrim_acc;
vector<vector<string> > finalTrim_acc;

vector<int> total_acc;

// store the attribute usage matrix
vector<vector<int> > attribue_usage_matrix;

// extract the aam column by column
vector<vector<int> > columns;
// final AA Matrix
vector<vector<string >> AAmatrix;

// read data from input txt. files
vector<string> inputReader(string input_txt) 
{
    vector<string> temp;

    ifstream input;
    std::ifstream file(input_txt);
    std::string str;
    while (std::getline(file, str)) {
        // remove all comma found
        str.erase(std::remove(str.begin(), str.end(), ','), str.end());
        temp.push_back(str);
    } 
    input.close();
    return temp;
}

// return a list of attributes, index -> a(index + 1) e.g 0 = a1, 1 = a2...
vector<string> extract_element(vector<string> original_list)
{   
    vector<string> return_element;
    string space_delimiter = " ";
    int position;
    string attribute;

    // skip first line : "LABEL NAME"
    for (int i = 1; i < original_list.size(); i++)
    {
        position = original_list[i].find(space_delimiter);
        attribute = original_list[i].substr(position+1, original_list[i].length()-position-2);
        return_element.push_back(attribute);
    }
    
    return return_element;
}

// lines of query are first ead into a vector of string
// now assign the strings of each line into a vector
vector<vector<string> > inputTrimmer(vector<string> input_txt)
{   
    vector<vector<string> > trimmed_data; 
    for (int i = 0; i < input_txt.size(); i++)
    {
        vector<string> tmp_str;
        stringstream str_s(input_txt[i]);
        int j = 0;

        while(str_s.good())
        {
            string tmp;
            // split by space
            getline(str_s, tmp, ' ');
            tmp_str.push_back(tmp);
        }

        trimmed_data.push_back(tmp_str);
    }

    return trimmed_data;
}

// find SELECT, FROM, WHERE indexes
int findKeywordIndex (vector<string> wordList, string keyword)
{
    for (int i = 0; i < wordList.size(); i++)
    {
        if (wordList[i] == keyword)
        {
            return i;
        }
    }
    return -1;  
}

// find if there is "=" and it's index
int findEqualIndex (string str)
{
    int pos = 0;
    int index;
    while((index = str.find("=", pos)) != string::npos) {
        pos = index + 1; //new position is from next element of index
    }
    return pos - 1;
}

// find if there is "SUM("
int findSumIndex (string str)
{
    int pos = 0;
    int index;
    while((index = str.find("SUM(", pos)) != string::npos) {
        pos = index + 1; //new position is from next element of index
    }
    return pos - 1;
}

string trim_keyword(string keyword) 
{
    const char* typeOfWhitespaces = " \t\n\r\f\v";
    keyword.erase(keyword.find_last_not_of(typeOfWhitespaces) + 1);
    keyword.erase(0,keyword.find_first_not_of(typeOfWhitespaces));
    
    return keyword;
}

vector<string> pick_keyWords(vector<string> pre_query)
{   
    vector<string> post_query;
    int select_pos, from_pos, if_where_pos;
    string trimmed_sum, trimmed_equal;

    select_pos = findKeywordIndex(pre_query, "SELECT");
    from_pos = findKeywordIndex(pre_query, "FROM");
    if_where_pos = findKeywordIndex(pre_query, "WHERE");
    
    for (int i = select_pos + 1; i < from_pos; i++)
    {
        post_query.push_back(pre_query[i]);
    }
    
    if (if_where_pos != -1)
    {   
        for (int i = if_where_pos + 1; i < pre_query.size(); i++)
        {   
            post_query.push_back(pre_query[i]);
        }
    }

    for (int i = 0; i < post_query.size(); i++)
    {   
        string substr1;
        int tmp1 = findEqualIndex(post_query[i]);
        if (tmp1 != -1)
        {
            substr1 = post_query[i].substr(0, tmp1);
            post_query[i] = substr1;
        }
    }

    for (int i = 0; i < post_query.size(); i++)
    {   
        string substr2;
        int tmp2 = findSumIndex(post_query[i]);
        if (tmp2 != -1)
        {
            substr2 = post_query[i].substr(4, post_query[i].size() - 5);
            post_query[i] = substr2;
        }
    }

    for (int i = 0; i < post_query.size(); i++)
    {
        post_query[i] = trim_keyword(post_query[i]);
    }
    

    return post_query;
}

vector<vector<string> > extract_queriesWords(vector<vector<string> >original_list)
{
    vector<vector<string> > tmp_list;
    vector<string> tmp_str;
    for (int i = 0; i < original_list.size(); i++)
    {
       tmp_str = pick_keyWords(original_list[i]);
       tmp_list.push_back(tmp_str);
    }

    return tmp_list;
}

vector<vector<int> > create_attribute_usage(int qu_size, int att_size)
{   
    vector<vector<int> > att_usage;
    for (int i = 0; i < qu_size; i++)
    {   
        vector<int> tmp;
        for (int j = 0; j < att_size; j++)
        {
            tmp.push_back(0);
        }
        att_usage.push_back(tmp);
    }

    return att_usage;
}

void increment_usage(vector<string> query, int q_num)
{     
    for (int i = 0; i < query.size(); i++)
    {  
       for (int j = 0; j < attributes_list.size(); j++)
       {   
           if (query[i] == attributes_list[j])
           {    
               attribue_usage_matrix[q_num][j]++;
           } 
       }
    }
}

void update_attribute_usage()
{   
    for (int i = 0; i < queries_word.size(); i++)
    {   
        increment_usage(queries_word[i], i);
    }
}

// function to get column by column from attribute usage matrix
vector<vector<int> > get_column_of_attr_usage(vector<vector<int> > attr_uasge)
{   
    vector<vector<int> > columns;
    int column_num = attr_uasge[0].size();

    for (int i = 0; i < column_num; i++)
    {   
        vector<int> tmp;
        for (int j = 0; j < attr_uasge.size(); j++)
        {
            tmp.push_back(attr_uasge[j][i]);
        }
        columns.push_back(tmp);
    }

    return columns;
} 

// sum up row by row of ACC file
vector<int> calculate_acc(vector<vector<string> > finalTrim_acc)
{   
    cout << "test" << endl;
    vector<int> acc;
    for (int i = 0; i < finalTrim_acc.size(); i++)
    {   
        cout << "test1" << endl;
        int tmp = 0;
        for (int j = 0; j < finalTrim_acc[i].size(); j++)
        {  
            cout << "test2" << endl; 
           tmp = tmp + stoi(finalTrim_acc[i][j]);
        }
        cout << "test3" << endl;
        acc.push_back(tmp);
    }
    return acc;
}

// multiply columns with queries frequencies
void indexMultiplyIndex()
{
    for (int i = 0; i < columns.size(); i++)
    {
        for (int j = 0; j < total_acc.size(); j++)
        {
            columns[i][j] = columns[i][j]*total_acc[j];
        }
    }
}

int upperPartOfFormula(vector<int> list1, vector<int> list2)
{   
    int_least32_t final_value;
    vector<int> multiply_two_list;
    for (int i = 0; i < columns[0].size(); i++)
    {   
        multiply_two_list.push_back(list1[i]*list2[i]);
    }

    final_value = std::accumulate(multiply_two_list.begin(), multiply_two_list.end(), 0);
    
    return final_value;
}

float lowerPartOfFormula(vector<int> list1, vector<int> list2)
{
    int sum_of_list1;
    int sum_of_list2;
    float final_value;

    sum_of_list1 = std::accumulate(list1.begin(), list1.end(), 0);
    sum_of_list2 = std::accumulate(list2.begin(), list2.end(), 0);

    final_value = sqrt(sum_of_list1*sum_of_list2);
    
    return final_value;
}

vector<vector<string >> calculateAAmatrix()
{   
    vector<vector<string >> AAmatrix;
    for (int i = 0; i < columns.size(); i++)
    {
        vector<string> vect(columns.size(), "0");
        AAmatrix.push_back(vect);
    }

    for (int i = 0; i < columns.size(); i++)
    {   
        for (int j = 0; j < columns.size(); j++)
        {   
            double value;
            int up = upperPartOfFormula(columns[i],columns[j]);
            float low = lowerPartOfFormula(columns[i], columns[j]);

            if (up == 0 || low == 0)
            {
                value = 0;
    
            } else 
            {
                value = up/low;
                value = ceil(value);
            }   
            
            //out << value << endl;

            string toString = to_string(value);
            int pos = toString.find(".");
            toString = toString.substr(0, pos);

            AAmatrix[i][j] = toString;
        }
    }
    return AAmatrix;
}

void printAAmatrix()
{  
    for (int i = 0; i < AAmatrix.size(); i++)
    {   
        for (int j = 0; j < AAmatrix[i].size(); j++)
        {   
            printf("%s ", AAmatrix[i][j].c_str());
        }
        cout << "\n";
    }
}



int main(int argc, char **argv)
{   
    // get data from files
    string att_file = argv[1];
    string queries_file = argv[2];
    string access_freq_file = argv[3];

    // process attribute list input
    attributes_input = inputReader(att_file);
    attributes_list = extract_element(attributes_input);

    // process queries input
    queries_input = inputReader(queries_file);
    trimmed_queries = inputTrimmer(queries_input);
    queries_word = extract_queriesWords(trimmed_queries);

    // get attribute usage matrix
    int queriesNum = queries_word.size();
    int attributeNum = attributes_list.size();
    attribue_usage_matrix = create_attribute_usage(queriesNum, attributeNum);
    update_attribute_usage();
    // extract attribute usage column by column 
    columns = get_column_of_attr_usage(attribue_usage_matrix);
    
    // process acc input
    access_freq_input = inputReader(access_freq_file);
    firstTrim_acc = extract_element(access_freq_input);
    finalTrim_acc = inputTrimmer(firstTrim_acc);
    total_acc = calculate_acc(finalTrim_acc);

    // for (int j = 0; j < finalTrim_acc[0].size(); j++)
    // {
    //     printf("%s ", finalTrim_acc[7][j].c_str());
    // }
    
    // multiply the column with queries frequency
    indexMultiplyIndex();
    
    AAmatrix = calculateAAmatrix();
    
    // printAAmatrix();
    
    // for (int j = 0; j < attributes_list.size(); j++)
    // {
    //     printf("%s ", attributes_list[j].c_str());
    // }

    // for (int i = 0; i < attribue_usage_matrix.size(); i++)
    // {   
    //     for (int j = 0; j < attribue_usage_matrix[i].size(); j++)
    //     {
    //         printf("%i ", attribue_usage_matrix[i][j]);
    //     }   
    //     cout << "\n";
    // }

    // cout << "\n"; 

    // for (int i = 0; i < columns.size(); i++)
    // {   
    //     for (int j = 0; j < columns[i].size(); j++)
    //     {
    //         printf("%i ", columns[i][j]);
    //     }   
    //     cout << "\n";
    // }
}


